download:latest:
  needs:
    - job: check-versions
      artifacts: true
  extends: .download
  before_script:
    - mv build-latest.txt version.txt
  rules:
    - if: $LATEST == "build"

build:armv7:latest:
  rules:
    - if: $LATEST == "build"
  needs:
    - download:latest
  variables:
    TYPE: latest
    GIT_STRATEGY: none
    ARCH: arm
    GOARCH: arm
    GOARM: 7
  extends: .build
  tags:
    - native-amd64

build:arm64:latest:
  rules:
    - if: $LATEST == "build"
  needs:
    - download:latest
  variables:
    TYPE: latest
    GIT_STRATEGY: none
    ARCH: arm64
    GOARCH: arm64
  extends: .build

build:amd64:latest:
  rules:
    - if: $LATEST == "build"
  needs:
    - download:latest
  variables:
    TYPE: latest
    GIT_STRATEGY: none
    ARCH: amd64
    GOARCH: amd64
  extends: .build
  tags:
    - native-amd64

containerize:latest:
  rules:
    - if: $LATEST == "build"
  extends: .containerize
  needs:
    - build:amd64:latest
    - build:arm64:latest
    - build:armv7:latest
  variables:
    TYPE: latest

scan:latest:
  rules:
    - if: $LATEST == "build"
  needs:
    - job: containerize:latest
      artifacts: false
  extends: .container_scanning
  before_script:
    - export VERSION=$(cat version.txt)
    - export SCANNING_IMAGE_NAME="${CI_REGISTRY_IMAGE}:${VERSION}"
  variables:
    GIT_STRATEGY: none
    NO_OUTPUT: "true"
